name: Security Pipeline
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
          required: true
      SNYK_TOKEN:
          required: true

jobs:
# Superlint a simple combination of various linters, written in bash, to help validate source code.
  Superlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint Repo
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Secrets detection is calling the Yelp Secrets Detector we use in pre-commit to ensure proper coverage
  secrets-detection:
    runs-on: 'ubuntu-latest'
    steps:
      - name: secrets detect
        uses: RobertFischer/detect-secrets-action@v2.0.0
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          notify_when: 'failure'
          channel: infosec-alerts
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY }}

  # Snyk native integration doesn't support poetry.lock files - this runs a check if a poetry.lock is found then runs a CLI scan to add coverage.
  file_existence:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "poetry.lock"

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        # Only runs if all of the files exists
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SRVC_SNYKGITACTION }}
        with:
          command: monitor
          args: --command=python3 --org=plan-x --severity-threshold=high
